<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.MockingKernel</name>
    </assembly>
    <members>
        <member name="T:Ninject.MockingKernel.AdditionalInterfaceParameter">
            <summary>
            Additional Interfaces
            </summary>
        </member>
        <member name="F:Ninject.MockingKernel.AdditionalInterfaceParameter.additionalInterface">
            <summary>
            The type of additional interface.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.AdditionalInterfaceParameter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.MockingKernel.AdditionalInterfaceParameter"/> class.
            </summary>
            <param name="additionalInterface">The type of additional interface</param>
        </member>
        <member name="M:Ninject.MockingKernel.AdditionalInterfaceParameter.GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>
            Get the interface array
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target</param>
            <returns>The interface type</returns>
        </member>
        <member name="M:Ninject.MockingKernel.AdditionalInterfaceParameter.Equals(Ninject.Parameters.IParameter)">
            <summary>
            Determines whether the object equals the specified object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>True</c> if the objects are equal; otherwise <c>false</c></returns>
        </member>
        <member name="P:Ninject.MockingKernel.AdditionalInterfaceParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Ninject.MockingKernel.AdditionalInterfaceParameter.ShouldInherit">
            <summary>
            Gets a value indicating whether the parameter should be inherited into child requests.
            </summary>
        </member>
        <member name="T:Ninject.MockingKernel.ExtensionsForBindingSyntax">
            <summary>
            Extensions for the fluent binding syntax API.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.ExtensionsForBindingSyntax.ToMock``1(Ninject.Syntax.IBindingToSyntax{``0},System.Type[])">
            <summary>
            Indicates that the service should be bound to a mocked instance of the specified type.
            </summary>
            <typeparam name="T">The service that is being mocked.</typeparam>
            <param name="builder">The builder that is building the binding.</param>
            <param name="additionalInterfaces">The additional interfaces for the mock.</param>
            <returns>The syntax for adding more information to the binding.</returns>
        </member>
        <member name="T:Ninject.MockingKernel.IMockProviderCallbackProvider">
            <summary>
            Provides a callback that creates a provider which creates the mock.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.IMockProviderCallbackProvider.GetCreationCallback">
            <summary>
            Gets a callback that creates an instance of the <see cref="T:Ninject.Activation.IProvider"/> that creates the mock.
            </summary>
            <returns> The created callback.</returns>
        </member>
        <member name="T:Ninject.MockingKernel.MockingKernel">
            <summary>
            A kernel that will create mocked instances (via Moq) for any service that is
            requested for which no binding is registered.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.MockingKernel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.MockingKernel.MockingKernel"/> class.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.MockingKernel.#ctor(Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.MockingKernel.MockingKernel"/> class.
            </summary>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.MockingKernel.MockingKernel.#ctor(Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.MockingKernel.MockingKernel"/> class.
            </summary>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.MockingKernel.MockingKernel.Reset">
            <summary>
            Clears the kernel's cache, immediately deactivating all activated instances regardless of scope.
            This does not remove any modules, extensions, or bindings.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.MockingKernel.AddComponents">
            <summary>
            Adds components to the kernel during startup.
            </summary>
        </member>
        <member name="T:Ninject.MockingKernel.MockMissingBindingResolver">
            <summary>
            Missing binding resolver that creates a mock for every none self bindable type.
            </summary>
        </member>
        <member name="F:Ninject.MockingKernel.MockMissingBindingResolver.mockProviderCallbackProvider">
            <summary>
            The call back provider for creating the mock provider.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.MockMissingBindingResolver.#ctor(Ninject.MockingKernel.IMockProviderCallbackProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.MockingKernel.MockMissingBindingResolver"/> class.
            </summary>
            <param name="mockProviderCallbackProvider">The mock provider callback provider.</param>
        </member>
        <member name="M:Ninject.MockingKernel.MockMissingBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified request.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The request in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="M:Ninject.MockingKernel.MockMissingBindingResolver.TypeIsInterfaceOrAbstract(System.Type)">
            <summary>
            Returns a value indicating whether the specified service is self-bindable.
            </summary>
            <param name="service">The service.</param>
            <returns><see langword="True"/> if the type is self-bindable; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.MockingKernel.SingletonSelfBindingResolver">
            <summary>
            Resolver for self bindable types. Binds them as singleton to self.
            </summary>
        </member>
        <member name="F:Ninject.MockingKernel.SingletonSelfBindingResolver.selfBindingResolver">
            <summary>
            The SelfBindingResolver that is used to create bindings for self bindable types.
            </summary>
        </member>
        <member name="M:Ninject.MockingKernel.SingletonSelfBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified request.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The request in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
    </members>
</doc>
